{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RADHESHYAM\\\\ReactJS\\\\netflix\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport axios from './axios';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport './Row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nconst Row = ({\n  title,\n  fetchUrl,\n  islargeRow\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      console.log(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie.title).then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n        console.log(url);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: \"white\"\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${base_url}${islargeRow ? movie.poster_path : movie.backdrop_path}`,\n          onClick: () => handleClick(movie),\n          className: `row_poster ${islargeRow && \"row_posterLarge\"}`,\n          alt: movie.name\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this), trailerUrl ? /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Row, \"L1ywPNv5QsX47ZoMAyL8l4aBE/I=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/RADHESHYAM/ReactJS/netflix/src/Row.js"],"names":["React","useEffect","useState","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","islargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","console","log","opts","height","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","err","color","map","poster_path","backdrop_path","name","id"],"mappings":"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","sourcesContent":[" import React from 'react'\r\nimport { useEffect,useState } from 'react';\r\nimport axios from './axios';\r\nimport YouTube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\nimport './Row.css'\r\nconst base_url=\"https://image.tmdb.org/t/p/original/\"\r\n\r\nconst Row = ({title,fetchUrl,islargeRow}) => {\r\nconst[movies,setMovies]=useState([]);\r\nconst [trailerUrl,setTrailerUrl]=useState(\"\")\r\n\r\nuseEffect(()=>{\r\nasync function fetchData(){\r\n   const request= await axios.get(fetchUrl)\r\n   setMovies(request.data.results)\r\n  console.log(request.data.results)\r\n   return request;\r\n}\r\n\r\nfetchData()\r\n\r\n\r\n},[fetchUrl])\r\n\r\nconst opts={\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVars:{\r\n        autoplay:1,\r\n    }\r\n}\r\n\r\nconst handleClick=(movie)=>{\r\nif(trailerUrl){\r\n    setTrailerUrl(\"\")\r\n}\r\nelse{\r\n   movieTrailer(movie.title)\r\n   .then((url)=>{\r\n     const urlParams= new URLSearchParams(new URL(url).search)\r\n\r\n       setTrailerUrl(urlParams.get(\"v\"))\r\n     console.log(url)\r\n   })\r\n   .catch(err=>{\r\n       console.log(err)\r\n   })\r\n}\r\n}\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 style={{color:\"white\"}}>{title}</h2>\r\n          <div className=\"row_posters\">\r\n              {\r\n                  movies.map(movie=>{\r\n                      return(\r\n                         \r\n                        <img key={movie.id} \r\n                        src={`${base_url}${islargeRow? movie.poster_path:movie.backdrop_path}`} \r\n                        onClick={()=>handleClick(movie)}\r\n                        className={`row_poster ${islargeRow && \"row_posterLarge\"}`}\r\n                        alt={movie.name}/>\r\n                      \r\n                      )\r\n                      \r\n                  })\r\n              }\r\n          </div>\r\n         { trailerUrl?<YouTube videoId={trailerUrl} opts={opts}/>:\"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}