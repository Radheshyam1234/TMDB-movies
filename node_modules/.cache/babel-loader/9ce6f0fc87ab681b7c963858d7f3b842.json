{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/RADHESHYAM/ReactJS/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/RADHESHYAM/ReactJS/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/RADHESHYAM/ReactJS/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{useEffect,useState}from'react';import axios from'./axios';import YouTube from'react-youtube';import movieTrailer from'movie-trailer';import'./Row.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";var Row=function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,islargeRow=_ref.islargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);//console.log(request.data.results)\nreturn _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer(movie.title||movie.name||movie.id).then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));console.log(url);}).catch(function(err){console.log(err);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{style:{color:\"white\"},children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{src:\"\".concat(base_url).concat(islargeRow?movie.poster_path:movie.backdrop_path),onClick:function onClick(){return handleClick(movie);},className:\"row_poster \".concat(islargeRow&&\"row_posterLarge\"),alt:movie.name},movie.id);})}),trailerUrl?/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts}):\"\"]});};export default Row;","map":{"version":3,"sources":["C:/Users/RADHESHYAM/ReactJS/netflix/src/Row.js"],"names":["React","useEffect","useState","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","islargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","id","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","err","color","map","poster_path","backdrop_path"],"mappings":"2cAAC,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACD,OAASC,SAAT,CAAmBC,QAAnB,KAAmC,OAAnC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CACA,MAAO,WAAP,C,wFACA,GAAMC,CAAAA,QAAQ,CAAC,sCAAf,CAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,MAAiC,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAzBC,QAAyB,MAAzBA,QAAyB,CAAhBC,UAAgB,MAAhBA,UAAgB,CAC7C,cAAwBR,QAAQ,CAAC,EAAD,CAAhC,wCAAMS,MAAN,eAAaC,SAAb,eACA,eAAiCV,QAAQ,CAAC,EAAD,CAAzC,yCAAOW,UAAP,eAAkBC,aAAlB,eAEAb,SAAS,CAAC,UAAI,SACCc,CAAAA,SADD,qIACd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACSQ,OADT,eAEGL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CACD;AAHF,gCAIUF,OAJV,wDADc,4CAQdF,SAAS,GAGR,CAXQ,CAWP,CAACN,QAAD,CAXO,CAAT,CAaA,GAAMW,CAAAA,IAAI,CAAC,CACPC,MAAM,CAAC,KADA,CAEPC,KAAK,CAAC,MAFC,CAGPC,UAAU,CAAC,CACPC,QAAQ,CAAC,CADF,CAHJ,CAAX,CAQA,GAAMC,CAAAA,WAAW,CAAC,QAAZA,CAAAA,WAAY,CAACC,KAAD,CAAS,CAC3B,GAAGb,UAAH,CAAc,CACVC,aAAa,CAAC,EAAD,CAAb,CACH,CAFD,IAGI,CACDT,YAAY,CAACqB,KAAK,CAAClB,KAAN,EAAakB,KAAK,CAACC,IAAnB,EAAyBD,KAAK,CAACE,EAAhC,CAAZ,CACCC,IADD,CACM,SAACC,GAAD,CAAO,CACX,GAAMC,CAAAA,SAAS,CAAE,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAjB,CAEEpB,aAAa,CAACiB,SAAS,CAACf,GAAV,CAAc,GAAd,CAAD,CAAb,CACFmB,OAAO,CAACC,GAAR,CAAYN,GAAZ,EACD,CAND,EAOCO,KAPD,CAOO,SAAAC,GAAG,CAAE,CACRH,OAAO,CAACC,GAAR,CAAYE,GAAZ,EACH,CATD,EAUF,CACA,CAhBD,CAkBI,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,WAAI,KAAK,CAAE,CAACC,KAAK,CAAC,OAAP,CAAX,UAA6B/B,KAA7B,EADJ,cAEE,YAAK,SAAS,CAAC,aAAf,UAEQG,MAAM,CAAC6B,GAAP,CAAW,SAAAd,KAAK,CAAE,CACd,mBAEE,YACA,GAAG,WAAKpB,QAAL,SAAgBI,UAAU,CAAEgB,KAAK,CAACe,WAAR,CAAoBf,KAAK,CAACgB,aAApD,CADH,CAEA,OAAO,CAAE,yBAAIjB,CAAAA,WAAW,CAACC,KAAD,CAAf,EAFT,CAGA,SAAS,sBAAgBhB,UAAU,EAAI,iBAA9B,CAHT,CAIA,GAAG,CAAEgB,KAAK,CAACC,IAJX,EAAUD,KAAK,CAACE,EAAhB,CAFF,CAUH,CAXD,CAFR,EAFF,CAkBGf,UAAU,cAAC,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAAD,CAA6C,EAlB1D,GADJ,CAsBH,CAjED,CAmEA,cAAeb,CAAAA,GAAf","sourcesContent":[" import React from 'react'\r\nimport { useEffect,useState } from 'react';\r\nimport axios from './axios';\r\nimport YouTube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\nimport './Row.css'\r\nconst base_url=\"https://image.tmdb.org/t/p/original/\"\r\n\r\nconst Row = ({title,fetchUrl,islargeRow}) => {\r\nconst[movies,setMovies]=useState([]);\r\nconst [trailerUrl,setTrailerUrl]=useState(\"\")\r\n\r\nuseEffect(()=>{\r\nasync function fetchData(){\r\n   const request= await axios.get(fetchUrl)\r\n   setMovies(request.data.results)\r\n  //console.log(request.data.results)\r\n   return request;\r\n}\r\n\r\nfetchData()\r\n\r\n\r\n},[fetchUrl])\r\n\r\nconst opts={\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVars:{\r\n        autoplay:1,\r\n    }\r\n}\r\n\r\nconst handleClick=(movie)=>{\r\nif(trailerUrl){\r\n    setTrailerUrl(\"\")\r\n}\r\nelse{\r\n   movieTrailer(movie.title||movie.name||movie.id)\r\n   .then((url)=>{\r\n     const urlParams= new URLSearchParams(new URL(url).search)\r\n\r\n       setTrailerUrl(urlParams.get(\"v\"))\r\n     console.log(url)\r\n   })\r\n   .catch(err=>{\r\n       console.log(err)\r\n   })\r\n}\r\n}\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 style={{color:\"white\"}}>{title}</h2>\r\n          <div className=\"row_posters\">\r\n              {\r\n                  movies.map(movie=>{\r\n                      return(\r\n                         \r\n                        <img key={movie.id} \r\n                        src={`${base_url}${islargeRow? movie.poster_path:movie.backdrop_path}`} \r\n                        onClick={()=>handleClick(movie)}\r\n                        className={`row_poster ${islargeRow && \"row_posterLarge\"}`}\r\n                        alt={movie.name}/>\r\n                      \r\n                      )\r\n                      \r\n                  })\r\n              }\r\n          </div>\r\n         { trailerUrl?<YouTube videoId={trailerUrl} opts={opts}/>:\"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}