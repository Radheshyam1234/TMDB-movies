{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RADHESHYAM\\\\ReactJS\\\\netflix\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nconst Row = ({\n  title,\n  fetchUrl,\n  islargeRow\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      console.log(request);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: \"white\"\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${base_url}${islargeRow ? movie.poster_path : movie.backdrop_path}`,\n          className: \"row_poster\",\n          alt: movie.name\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Row, \"+jZiGaK1IrFkDFSplSYv9W7La4s=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/RADHESHYAM/ReactJS/netflix/src/Row.js"],"names":["React","useEffect","useState","axios","base_url","Row","title","fetchUrl","islargeRow","movies","setMovies","fetchData","request","get","data","results","console","log","color","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAmBC,QAAnB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;AACA,MAAMC,QAAQ,GAAC,sCAAf;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAD,KAAiC;AAAA;;AAC7C,QAAK,CAACC,MAAD,EAAQC,SAAR,IAAmBR,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACd,mBAAeU,SAAf,GAA0B;AACvB,YAAMC,OAAO,GAAE,MAAMT,KAAK,CAACU,GAAN,CAAUN,QAAV,CAArB;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,aAAOA,OAAP;AACF;;AAEDD,IAAAA,SAAS;AAGR,GAXQ,EAWP,CAACJ,QAAD,CAXO,CAAT;AAaI,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAI,MAAA,KAAK,EAAE;AAACW,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA,gBAA6BZ;AAA7B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAEQG,MAAM,CAACU,GAAP,CAAWC,KAAK,IAAE;AACd,4BAEE;AACA,UAAA,GAAG,EAAG,GAAEhB,QAAS,GAAEI,UAAU,GAAEY,KAAK,CAACC,WAAR,GAAoBD,KAAK,CAACE,aAAc,EADrE;AAEA,UAAA,SAAS,EAAC,YAFV;AAGA,UAAA,GAAG,EAAEF,KAAK,CAACG;AAHX,WAAUH,KAAK,CAACI,EAAhB;AAAA;AAAA;AAAA;AAAA,gBAFF;AASH,OAVD;AAFR;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CApCD;;GAAMnB,G;;KAAAA,G;AAsCN,eAAeA,GAAf","sourcesContent":["import React from 'react'\r\nimport { useEffect,useState } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css'\r\nconst base_url=\"https://image.tmdb.org/t/p/original/\"\r\n\r\nconst Row = ({title,fetchUrl,islargeRow}) => {\r\nconst[movies,setMovies]=useState([]);\r\n\r\nuseEffect(()=>{\r\nasync function fetchData(){\r\n   const request= await axios.get(fetchUrl)\r\n   setMovies(request.data.results)\r\n   console.log(request)\r\n   return request;\r\n}\r\n\r\nfetchData()\r\n\r\n\r\n},[fetchUrl])\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 style={{color:\"white\"}}>{title}</h2>\r\n          <div className=\"row_posters\">\r\n              {\r\n                  movies.map(movie=>{\r\n                      return(\r\n                         \r\n                        <img key={movie.id} \r\n                        src={`${base_url}${islargeRow? movie.poster_path:movie.backdrop_path}`} \r\n                        className=\"row_poster\"\r\n                        alt={movie.name}/>\r\n                      \r\n                      )\r\n                      \r\n                  })\r\n              }\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}